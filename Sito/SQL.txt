DROP DATABASE IF EXISTS BOSTARTER;
CREATE DATABASE IF NOT EXISTS BOSTARTER;
USE BOSTARTER;


CREATE TABLE UTENTE (
    email VARCHAR(255) PRIMARY KEY,
    nickname VARCHAR(50) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    nome VARCHAR(50) NOT NULL,
    cognome VARCHAR(50) NOT NULL,
    anno_nascita YEAR NOT NULL,
    luogo_nascita VARCHAR(100) NOT NULL
) ENGINE="INNODB";


CREATE TABLE UTENTE_AMMINISTRATORE(
    email_utente_amm VARCHAR(255) PRIMARY KEY,
    codice_sicurezza VARCHAR(255) NOT NULL,
    FOREIGN KEY (email_utente_amm) REFERENCES UTENTE(email) ON DELETE CASCADE

) ENGINE="INNODB";

CREATE TABLE UTENTE_CREATORE(
    email_utente_creat VARCHAR(255) PRIMARY KEY,
    nr_progetti INT DEFAULT 0,
    affidabilita FLOAT CHECK (affidabilita BETWEEN 0 AND 10), /* Valutare se enum "Buono", ecc */
    FOREIGN KEY (email_utente_creat) REFERENCES UTENTE(email) ON DELETE CASCADE
) ENGINE="INNODB";


CREATE TABLE SKILL(
    competenza VARCHAR(100),
    email_utente_amm VARCHAR(255),
    PRIMARY KEY (competenza),
    FOREIGN KEY (email_utente_amm) REFERENCES UTENTE_AMMINISTRATORE(email_utente_amm) ON DELETE CASCADE
) ENGINE="INNODB";

CREATE TABLE INDICA(
    competenza VARCHAR(100),
    livello INT CHECK (livello BETWEEN 0 AND 5),
    email_utente VARCHAR(255),
    PRIMARY KEY (competenza, email_utente),
    FOREIGN KEY (email_utente) REFERENCES UTENTE(email) ON DELETE CASCADE
);



CREATE TABLE PROGETTO (
    nome VARCHAR(255) PRIMARY KEY,
    descrizione TEXT NOT NULL,
    data_inserimento DATE NOT NULL,
    email_creatore VARCHAR(255) NOT NULL,
    budget FLOAT NOT NULL CHECK (budget > 0),
    data_limite DATE NOT NULL,
    stato ENUM('aperto', 'chiuso') NOT NULL DEFAULT 'aperto',
    FOREIGN KEY (email_creatore) REFERENCES UTENTE_CREATORE(email_utente_creat) ON DELETE CASCADE
) ENGINE="INNODB";

CREATE TABLE COMMENTO (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email_utente VARCHAR(255) NOT NULL,
    nome_progetto VARCHAR(255) NOT NULL,
    data_commento DATE NOT NULL,
    testo TEXT NOT NULL,
    FOREIGN KEY (email_utente) REFERENCES UTENTE(email) ON DELETE CASCADE,
    FOREIGN KEY (nome_progetto) REFERENCES PROGETTO(nome) ON DELETE CASCADE
) ENGINE="INNODB";

CREATE TABLE RISPOSTA_COMMENTO (
    id_commento INT,
    email_creatore VARCHAR(255),
    data_risposta DATE NOT NULL,
    testo TEXT NOT NULL,
    PRIMARY KEY (id_commento, email_creatore),
    FOREIGN KEY (id_commento) REFERENCES COMMENTO(id) ON DELETE CASCADE,
    FOREIGN KEY (email_creatore) REFERENCES UTENTE_CREATORE(email_utente_creat) ON DELETE CASCADE
);



CREATE TABLE FOTO_PROGETTO (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome_progetto VARCHAR(255) NOT NULL,
    foto_url TEXT NOT NULL,
    FOREIGN KEY (nome_progetto) REFERENCES PROGETTO(nome) ON DELETE CASCADE
) ENGINE="INNODB";

CREATE TABLE REWARD (
    codice INT AUTO_INCREMENT PRIMARY KEY,
    nome_progetto VARCHAR(255) NOT NULL,
    descrizione TEXT NOT NULL,
    foto_url TEXT NOT NULL,
    FOREIGN KEY (nome_progetto) REFERENCES PROGETTO(nome) ON DELETE CASCADE
) ENGINE="INNODB";

CREATE TABLE PROGETTO_HARDWARE (
    nome_progetto VARCHAR(255) PRIMARY KEY,
    FOREIGN KEY (nome_progetto) REFERENCES PROGETTO(nome) ON DELETE CASCADE
) ENGINE="INNODB";

CREATE TABLE COMPONENTE (
    nome VARCHAR(255) PRIMARY KEY,
    descrizione TEXT NOT NULL,
    prezzo FLOAT NOT NULL CHECK (prezzo > 0),
    quantita INT NOT NULL CHECK (quantita > 0)
) ENGINE="INNODB";

CREATE TABLE FORMATO (
    nome_componente VARCHAR(255),
    nome_hardware VARCHAR(255),
    PRIMARY KEY (nome_componente, nome_hardware),
    FOREIGN KEY (nome_hardware) REFERENCES PROGETTO_HARDWARE(nome_progetto) ON DELETE CASCADE,
    FOREIGN KEY (nome_componente) REFERENCES COMPONENTE(nome) ON DELETE CASCADE
) ENGINE="INNODB";

CREATE TABLE PROGETTO_SOFTWARE (
    nome_progetto VARCHAR(255) PRIMARY KEY,
    FOREIGN KEY (nome_progetto) REFERENCES PROGETTO(nome) ON DELETE CASCADE
) ENGINE="INNODB";


CREATE TABLE PROFILO (
    id INT AUTO_INCREMENT PRIMARY KEY,
    nome VARCHAR(255),
    nome_software VARCHAR(255),
    FOREIGN KEY (nome_software) REFERENCES PROGETTO_SOFTWARE(nome_progetto) ON DELETE CASCADE
) ENGINE="INNODB";

CREATE TABLE COMPRENDE(
    competenza VARCHAR(100),
    livello INT CHECK (livello BETWEEN 0 AND 5),
    id_profilo INT,
    PRIMARY KEY (competenza, id_profilo),
    FOREIGN KEY (id_profilo) REFERENCES PROFILO(id) ON DELETE CASCADE
);

CREATE TABLE FINANZIAMENTO (
    id INT AUTO_INCREMENT,
    data_finanziamento DATE,
    importo FLOAT NOT NULL CHECK (importo > 0),
    email_utente VARCHAR(255) NOT NULL,
    nome_progetto VARCHAR(255) NOT NULL,
    codice_reward INT NOT NULL,
    PRIMARY KEY (id, data_finanziamento),
    FOREIGN KEY (email_utente) REFERENCES UTENTE(email) ON DELETE CASCADE,
    FOREIGN KEY (nome_progetto) REFERENCES PROGETTO(nome) ON DELETE CASCADE,
    FOREIGN KEY (codice_reward) REFERENCES REWARD(codice) ON DELETE CASCADE
) ENGINE="INNODB";


CREATE TABLE CANDIDATURA (
    id INT AUTO_INCREMENT PRIMARY KEY,
    email_utente VARCHAR(255) NOT NULL,
    /* nome_progetto VARCHAR(255) NOT NULL, */
    id_profilo INT NOT NULL,
    esito BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (email_utente) REFERENCES UTENTE(email) ON DELETE CASCADE,
    /* FOREIGN KEY (nome_progetto) REFERENCES PROGETTO(nome) ON DELETE CASCADE,*/
    FOREIGN KEY (id_profilo) REFERENCES PROFILO(id) ON DELETE CASCADE
);



INSERT INTO UTENTE (email, nickname, password, nome, cognome, anno_nascita, luogo_nascita) VALUES
('test1@example.com', 'testuser1', '$2y$10$kAG8SXG2hVSiKwnkc4Ho1OhFzp8Iqgv7gsv/xx7XiFFGOKGAPn7g2', 'Mario', 'Rossi', 1990, 'Roma'),
('test2@example.com', 'testuser2', '$2y$10$kAG8SXG2hVSiKwnkc4Ho1OhFzp8Iqgv7gsv/xx7XiFFGOKGAPn7g2', 'Luca', 'Bianchi', 1985, 'Milano'),
('fedesgambe@icloud.com', 'fedesgambe', '$2y$10$kAG8SXG2hVSiKwnkc4Ho1OhFzp8Iqgv7gsv/xx7XiFFGOKGAPn7g2', 'Federico', 'Sgambelluri', 2003, 'Bologna'),
('peppe24@gmail.com', 'peppeeee', '$2y$10$kAG8SXG2hVSiKwnkc4Ho1OhFzp8Iqgv7gsv/xx7XiFFGOKGAPn7g2', 'Giuseppe', 'Cozza', 2003, 'Bologna'),
('simonemagli@gmail.com', 'sama', '$2y$10$kAG8SXG2hVSiKwnkc4Ho1OhFzp8Iqgv7gsv/xx7XiFFGOKGAPn7g2', 'Simone', 'Magli', 2003, 'Bologna'),
('mirko@gmail.com', 'Mirko', '$2y$10$kAG8SXG2hVSiKwnkc4Ho1OhFzp8Iqgv7gsv/xx7XiFFGOKGAPn7g2', 'Mirko', 'Rossi', 1980, 'Roma'),
('test3@example.com', 'testuser3', '$2y$10$kAG8SXG2hVSiKwnkc4Ho1OhFzp8Iqgv7gsv/xx7XiFFGOKGAPn7g2', 'Giulia', 'Verdi', 1992, 'Napoli');


INSERT INTO UTENTE_CREATORE (email_utente_creat, nr_progetti, affidabilita) VALUES
('test1@example.com', 0, 7.5),
('test2@example.com', 0, 8.0),
('fedesgambe@icloud.com', 0, 8.0),
('simonemagli@gmail.com', 0, 8.0),
('test3@example.com', 0, 6.5);

INSERT INTO UTENTE_AMMINISTRATORE (email_utente_amm, codice_sicurezza)
VALUES ('peppe24@gmail.com', '$2y$10$aFf/xsZRwAke8XG47X1HUOYTHH4hIdoHe0pTKEXlSuQw4Q9szA0Yu');


INSERT INTO PROGETTO (nome, descrizione, data_inserimento, email_creatore, budget, data_limite, stato) 
VALUES 
('Smart Home AI', 'Un sistema di intelligenza artificiale per la gestione delle case smart.', CURDATE(), 'test1@example.com', 15000, DATE_ADD(CURDATE(), INTERVAL 30 DAY), 'aperto'),
('EcoCar', 'Un’auto elettrica ecologica con materiali sostenibili.', CURDATE(), 'test2@example.com', 25000, DATE_ADD(CURDATE(), INTERVAL 45 DAY), 'aperto'),
('VR Learning', 'Una piattaforma di apprendimento in realtà virtuale per scuole e università.', CURDATE(), 'test3@example.com', 20000, DATE_ADD(CURDATE(), INTERVAL 60 DAY), 'aperto'),
('Mucca Silver', 'Una mucca di carta stagnola', CURDATE(), 'fedesgambe@icloud.com', 15000, DATE_ADD(CURDATE(), INTERVAL 30 DAY), 'aperto'),
('Smart Park', 'Un parcehggio digitale per torvare sempre posto', CURDATE(), 'simonemagli@gmail.com', 25000, DATE_ADD(CURDATE(), INTERVAL 45 DAY), 'aperto'),
('Flipper City', 'Gioca a flipper, ma la mappa è la tua città', CURDATE(), 'fedesgambe@icloud.com', 20000, DATE_ADD(CURDATE(), INTERVAL 60 DAY), 'aperto'),
('Emilio 5.0', 'Il famosissimo Emilio, ma per adulti', CURDATE(), 'fedesgambe@icloud.com', 20000, DATE_ADD(CURDATE(), INTERVAL 60 DAY), 'aperto');


INSERT INTO FOTO_PROGETTO (nome_progetto, foto_url) VALUES
('EcoCar', 'images/progetto1.jpg'),
('Smart Home AI', 'images/progetto2.jpg'),
('VR Learning', 'images/progetto3.jpg'),
('Mucca Silver', 'images/mucca.png'),
('Smart Park', 'images/smartpark.png'),
('Flipper City', 'images/flipper.png'),
('Emilio 5.0', 'images/emilio.png');


INSERT INTO REWARD (nome_progetto, descrizione, foto_url) VALUES
('EcoCar', 'Sticker esclusivo del progetto', 'images/car.png'),
('EcoCar', 'T-shirt personalizzata del progetto', 'images/reward2.png'),
('EcoCar', 'Accesso anticipato ai contenuti del progetto', 'images/reward3.png'),

('Smart Home AI', 'Stampa digitale ad alta risoluzione', 'images/reward4.png'),
('Smart Home AI', 'NFT esclusivo del progetto', 'images/reward5.png'),
('Smart Home AI', 'Meet & Greet con l\'artista', 'images/reward6.png'),

('VR Learning', 'Guida e-book su sostenibilità', 'images/reward7.png'),
('VR Learning', 'Sconto su prodotti green', 'images/reward8.png'),
('VR Learning', 'Nome inciso sul prodotto finale', 'images/reward9.png'),

('Mucca Silver', 'Sticker in edizione limitata a tema mucca', 'images/reward10.png'),
('Mucca Silver', 'Miniatura in carta stagnola firmata dal team', 'images/reward11.png'),
('Mucca Silver', 'Accesso esclusivo al backstage di creazione', 'images/reward12.png'),

('Smart Park', 'Priorità di parcheggio in strutture convenzionate', 'images/reward13.png'),
('Smart Park', 'T-shirt ufficiale del progetto con logo', 'images/reward14.png'),
('Smart Park', 'App premium con funzioni avanzate di parcheggio', 'images/reward15.png'),

('Flipper City', 'Spilla da collezione con design del flipper', 'images/reward16.png'),
('Flipper City', 'Tavola da gioco personalizzata con la mappa della città', 'images/monopoli.png'),
('Flipper City', 'Accesso anticipato alla versione beta del gioco', 'images/reward18.png'),

('Emilio 5.0', 'Poster firmato dal creatore', 'images/reward19.png'),
('Emilio 5.0', 'Contenuti extra e dietro le quinte', 'images/reward20.png'),
('Emilio 5.0', 'Incontro virtuale con il team di sviluppo', 'images/reward21.png');



INSERT INTO PROGETTO_HARDWARE (nome_progetto) VALUES
('Emilio 5.0'),
('Mucca Silver'),
('Smart Home AI'),
('EcoCar'),
('Smart Park');

INSERT INTO PROGETTO_SOFTWARE (nome_progetto) VALUES
('Flipper City'),
('VR Learning');



INSERT INTO SKILL (competenza, email_utente_amm) VALUES
('Analisi 1', 'peppe24@gmail.com'),
('Basi di Dati', 'peppe24@gmail.com'),
('Chimica dei materiali', 'peppe24@gmail.com'),
('Elettronica di base', 'peppe24@gmail.com'),
('Python', 'peppe24@gmail.com'),
('PHP, HTML, CSS, Javascript', 'peppe24@gmail.com'),
('Google Maps', 'peppe24@gmail.com'),
('Fisica delle sfere', 'peppe24@gmail.com');


INSERT INTO PROFILO (id, nome, nome_software) VALUES
(1, 'Fisico', 'Flipper City'),
(3, 'Programmatore', 'Flipper City'),
(2, 'Ingegnere IT', 'Flipper City');

INSERT INTO INDICA (competenza, livello, email_utente) VALUES
('Basi di Dati', 5, 'simonemagli@gmail.com'),
('Fisica delle sfere', 3, 'fedesgambe@icloud.com'),
('Fisica delle sfere', 5, 'mirko@gmail.com'),
('Google Maps', 3, 'fedesgambe@icloud.com'),
('Google Maps', 5, 'mirko@gmail.com'),
('HTML, CSS, PHP, Javascript', 5, 'simonemagli@gmail.com'),
('Java', 5, 'fedesgambe@icloud.com'),
('Python', 5, 'simonemagli@gmail.com');

/*
INSERT INTO CANDIDATURA (id, email_utente, id_profilo, esito) VALUES
(4,'fedesgambe@icloud.com', 1, -1),
(5,'fedesgambe@icloud.com', 2, 1),
(7,'simonemagli@gmail.com', 3, 1),
(8,'mirko@gmail.com', 1, 1),
(9,'mirko@gmail.com', 2, -1),
(11,'mirko@gmail.com', 1, 0),
(12,'mirko@gmail.com', 2, 0);

*/

INSERT INTO COMPRENDE (competenza, livello, id_profilo) VALUES
('Basi di Dati', 2, 3),
('Fisica delle sfere', 1, 1),
('Google Maps', 3, 2),
('HTML, CSS, PHP, Javascript', 5, 3),
('Java', 4, 2),
('Python', 5, 3);


INSERT INTO FINANZIAMENTO (data_finanziamento, importo, email_utente, nome_progetto, codice_reward) VALUES
('2025-03-23', 78, 'fedesgambe@icloud.com', 'EcoCar', 1),
('2025-03-23', 67, 'simonemagli@gmail.com', 'Flipper City', 17);



/* ------------------------------------ */
/* PROCEDURE PER INSERIMENTO LOG EVENTI */

CREATE TABLE IF NOT EXISTS LOG_EVENTI (
    id INT AUTO_INCREMENT PRIMARY KEY,
    evento VARCHAR(255) NOT NULL,
    email_utente VARCHAR(255) NOT NULL,
    data TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    descrizione TEXT NOT NULL,
    sincronizzato BOOLEAN DEFAULT FALSE
) ENGINE=INNODB;


DELIMITER //
CREATE PROCEDURE InserisciLogEvento(
    IN p_evento VARCHAR(255),
    IN p_email_utente VARCHAR(255),
    IN p_descrizione TEXT
)
BEGIN
   
    -- Inserimento del log
    INSERT INTO LOG_EVENTI (evento, email_utente, descrizione)
    VALUES (p_evento, p_email_utente, p_descrizione);
END //
DELIMITER ;

/* ------------------------------------ */
/* BUSINESS RULES E VINCOLI SULL'IMPLEMENTAZIONE */

/* Validazione delle candidature:
   La candidatura è valida se, per ogni skill richiesta in un profilo (tabella COMPRENDE),
   l'utente (tabella INDICA) possiede la stessa competenza con un livello maggiore o uguale. */
CREATE VIEW Candidature_Valide AS
SELECT C.email_utente, C.id_profilo, CMP.competenza
FROM CANDIDATURA C
JOIN INDICA I ON C.email_utente = I.email_utente
JOIN COMPRENDE CMP ON C.id_profilo = CMP.id_profilo
WHERE I.competenza = CMP.competenza AND I.livello >= CMP.livello;


/* Trigger: Verifica che la somma dei finanziamenti non superi il budget del progetto */
DELIMITER //
CREATE TRIGGER verifica_budget_superato
AFTER INSERT ON FINANZIAMENTO
FOR EACH ROW
BEGIN
    DECLARE totale FLOAT;
    DECLARE budget FLOAT;
    
    -- Calcola la somma totale dei finanziamenti per il progetto
    SELECT SUM(importo) INTO totale 
    FROM FINANZIAMENTO 
    WHERE nome_progetto = NEW.nome_progetto;
    
    -- Ottiene il budget del progetto
    SELECT budget INTO budget 
    FROM PROGETTO 
    WHERE nome = NEW.nome_progetto;
    
    -- Se i finanziamenti raggiungono o superano il budget, chiude il progetto
    IF totale >= budget THEN
        UPDATE PROGETTO 
        SET stato = 'chiuso' 
        WHERE nome = NEW.nome_progetto;
    END IF;
END //
DELIMITER ;

/* Evento: Chiude i progetti aperti superata la data limite */
DELIMITER //
CREATE EVENT chiudi_progetti_scaduti
ON SCHEDULE EVERY 1 DAY
DO
BEGIN
    UPDATE PROGETTO
    SET stato = 'chiuso'
    WHERE stato = 'aperto' AND data_limite < CURDATE();
END //
DELIMITER ;

/* Trigger 3: Aggiorna l’affidabilità di un creatore alla ricezione di un finanziamento.
   Nota: Per rispettare il vincolo (0-10), si calcola (progetti_finanziati/ totale_progetti)*10 */
DELIMITER //
CREATE TRIGGER aggiorna_affidabilita_finanziamento
AFTER INSERT ON FINANZIAMENTO
FOR EACH ROW
BEGIN
    DECLARE progetti_finanziati INT;
    DECLARE totale_progetti INT;
    
    -- Numero di progetti del creatore che hanno ricevuto almeno un finanziamento
    SELECT COUNT(DISTINCT nome_progetto) INTO progetti_finanziati
    FROM FINANZIAMENTO
    WHERE nome_progetto IN (
        SELECT nome 
        FROM PROGETTO 
        WHERE email_creatore = (SELECT email_creatore FROM PROGETTO WHERE nome = NEW.nome_progetto)
    );
    
    -- Numero totale di progetti creati dal creatore
    SELECT COUNT(*) INTO totale_progetti 
    FROM PROGETTO 
    WHERE email_creatore = (SELECT email_creatore FROM PROGETTO WHERE nome = NEW.nome_progetto);
    
    -- Aggiornamento dell'affidabilità (scala 0-10)
    IF totale_progetti > 0 THEN
        UPDATE UTENTE_CREATORE
        SET affidabilita = ROUND((progetti_finanziati / totale_progetti) * 10, 2)
        WHERE email_utente_creat = (SELECT email_creatore FROM PROGETTO WHERE nome = NEW.nome_progetto);
    END IF;
END //
DELIMITER ;

/* Trigger 4: Incrementa il numero di progetti per un creatore alla creazione di un nuovo progetto */
DELIMITER //
CREATE TRIGGER incrementa_nr_progetti
AFTER INSERT ON PROGETTO
FOR EACH ROW
BEGIN
    UPDATE UTENTE_CREATORE
    SET nr_progetti = nr_progetti + 1
    WHERE email_utente_creat = NEW.email_creatore;
END //
DELIMITER ;

/* ------------------------------------ */
/* OPERAZIONI CHE RIGUARDANO TUTTI GLI UTENTI */

/* Log registrazione nuovo utente */
DELIMITER //
CREATE TRIGGER log_nuovo_utente
AFTER INSERT ON UTENTE
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuovo Utente', NEW.email, CONCAT('L\'utente ', NEW.nickname, ' si è registrato.'));
END //
DELIMITER ;

/* Log inserimento skill di curriculum (tabella INDICA) */
DELIMITER //
CREATE TRIGGER log_inserimento_skill
AFTER INSERT ON INDICA
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Inserimento Skill', NEW.email_utente, 
        CONCAT('L\'utente ha aggiunto la skill ', NEW.competenza, ' con livello ', NEW.livello, '.'));
END //
DELIMITER ;

/* Procedura per log della visualizzazione dei progetti */
DELIMITER //
CREATE PROCEDURE Log_Visualizzazione_Progetti(
    IN p_email_utente VARCHAR(255)
)
BEGIN
    CALL InserisciLogEvento('Visualizzazione Progetti', p_email_utente, 
        'L\'utente ha visualizzato la lista dei progetti disponibili.');
END //
DELIMITER ;

/* Log finanziamento di un progetto */
DELIMITER //
CREATE TRIGGER log_finanziamento
AFTER INSERT ON FINANZIAMENTO
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuovo Finanziamento', NEW.email_utente, 
        CONCAT('L\'utente ha finanziato il progetto ', NEW.nome_progetto, ' con ', NEW.importo, ' euro.'));
END //
DELIMITER ;

/* Log scelta della reward per un progetto */
DELIMITER //
CREATE TRIGGER log_scelta_reward
AFTER INSERT ON FINANZIAMENTO
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Scelta Reward', NEW.email_utente, 
        CONCAT('L\'utente ha scelto la reward con codice ', NEW.codice_reward, ' per il progetto ', NEW.nome_progetto, '.'));
END //
DELIMITER ;

/* Log inserimento di un commento su un progetto */
DELIMITER //
CREATE TRIGGER log_nuovo_commento
AFTER INSERT ON COMMENTO
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuovo Commento', NEW.email_utente, 
        CONCAT('L\'utente ha commentato il progetto ', NEW.nome_progetto, '.'));
END //
DELIMITER ;
nu
/* Log inserimento candidatura per un profilo */
DELIMITER //
CREATE TRIGGER log_nuova_candidatura
AFTER INSERT ON CANDIDATURA
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuova Candidatura', NEW.email_utente, 
        CONCAT('L\'utente si è candidato per il profilo ', NEW.id_profilo, '.'));
END //
DELIMITER ;

/* ------------------------------------ */
/* OPERAZIONI CHE RIGUARDANO GLI AMMINISTRATORI */

/* Log inserimento di una nuova stringa nella lista delle competenze (tabella SKILL) */
DELIMITER //
CREATE TRIGGER log_nuova_skill
AFTER INSERT ON SKILL
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuova Skill', NEW.email_utente_amm, 
        CONCAT('L\'amministratore ha aggiunto la competenza ', NEW.competenza, '.'));
END //
DELIMITER ;

/* Procedura per log di autenticazione amministratore */
DELIMITER //
CREATE PROCEDURE Log_Autenticazione_Amministratore(
    IN p_email_utente VARCHAR(255)
)
BEGIN
    CALL InserisciLogEvento('Autenticazione Amministratore', p_email_utente, 
        'L\'amministratore ha effettuato l\'accesso con codice di sicurezza.');
END //
DELIMITER ;

/* ------------------------------------ */
/* OPERAZIONI CHE RIGUARDANO GLI UTENTI CREATORI */

/* Log creazione di un nuovo progetto */
DELIMITER //
CREATE TRIGGER log_nuovo_progetto
AFTER INSERT ON PROGETTO
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuovo Progetto', NEW.email_creatore, 
        CONCAT('L\'utente ha creato il progetto ', NEW.nome, '.'));
END //
DELIMITER ;

/* Log inserimento di una reward per un progetto */
DELIMITER //
CREATE TRIGGER log_nuova_reward
AFTER INSERT ON REWARD
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuova Reward', 
        (SELECT email_creatore FROM PROGETTO WHERE nome = NEW.nome_progetto), 
        CONCAT('L\'utente ha aggiunto una reward per il progetto ', NEW.nome_progetto, '.'));
END //
DELIMITER ;

/* Log inserimento di una risposta ad un commento */
DELIMITER //
CREATE TRIGGER log_risposta_commento
AFTER INSERT ON RISPOSTA_COMMENTO
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Risposta a Commento', NEW.email_creatore, 
        CONCAT('L\'utente ha risposto a un commento con ID ', NEW.id_commento, '.'));
END //
DELIMITER ;

/* Log creazione di un profilo per un progetto software */
DELIMITER //
CREATE TRIGGER log_nuovo_profilo
AFTER INSERT ON PROFILO
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuovo Profilo', 
        (SELECT email_creatore FROM PROGETTO WHERE nome = NEW.nome_software), 
        CONCAT('L\'utente ha creato il profilo ', NEW.nome, ' per il progetto software ', NEW.nome_software, '.'));
END //
DELIMITER ;

/* Log accettazione o rifiuto di una candidatura */
DELIMITER //
CREATE TRIGGER log_accettazione_candidatura
AFTER UPDATE ON CANDIDATURA
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Gestione Candidatura', 
        (SELECT email_creatore FROM PROGETTO WHERE nome =
            (SELECT nome_software FROM PROFILO WHERE id = NEW.id_profilo)),
        CONCAT('L\'utente ha ', IF(NEW.esito, 'accettato', 'rifiutato'), 
               ' la candidatura di ', NEW.email_utente, ' per il profilo ', NEW.id_profilo, '.'));
END //
DELIMITER ;

/* ------------------------------------ */
/* STATISTICHE (VISIBILI DA TUTTI GLI UTENTI) */

/* Classifica degli utenti creatori per affidabilità */
CREATE VIEW ClassificaCreatori AS
SELECT U.nickname, UC.affidabilita
FROM UTENTE_CREATORE UC
JOIN UTENTE U ON UC.email_utente_creat = U.email
ORDER BY UC.affidabilita DESC
LIMIT 3;

/* Progetti aperti più vicini al completamento */
CREATE VIEW ProgettiViciniAlCompletamento AS
SELECT P.nome, P.budget, 
       (P.budget - COALESCE(SUM(F.importo), 0)) AS mancante
FROM PROGETTO P
LEFT JOIN FINANZIAMENTO F ON P.nome = F.nome_progetto
WHERE P.stato = 'aperto'
GROUP BY P.nome, P.budget
ORDER BY mancante ASC
LIMIT 3;

/* Classifica degli utenti in base al totale dei finanziamenti erogati */
CREATE VIEW ClassificaFinanziatori AS
SELECT U.nickname, SUM(F.importo) AS totale_finanziato
FROM FINANZIAMENTO F
JOIN UTENTE U ON F.email_utente = U.email
GROUP BY U.nickname
ORDER BY totale_finanziato DESC
LIMIT 3;