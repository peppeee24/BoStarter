/* ------------------------------------ */
/* PROCEDURE PER INSERIMENTO LOG EVENTI */

CREATE TABLE IF NOT EXISTS LOG_EVENTI (
    id INT AUTO_INCREMENT PRIMARY KEY,
    evento VARCHAR(255) NOT NULL,
    email_utente VARCHAR(255) NOT NULL,
    data TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    descrizione TEXT NOT NULL
) ENGINE=INNODB;


DELIMITER //
CREATE PROCEDURE InserisciLogEvento(
    IN p_evento VARCHAR(255),
    IN p_email_utente VARCHAR(255),
    IN p_descrizione TEXT
)
BEGIN
   
    -- Inserimento del log
    INSERT INTO LOG_EVENTI (evento, email_utente, descrizione)
    VALUES (p_evento, p_email_utente, p_descrizione);
END //
DELIMITER ;

/* ------------------------------------ */
/* BUSINESS RULES E VINCOLI SULL'IMPLEMENTAZIONE */

/* Validazione delle candidature:
   La candidatura è valida se, per ogni skill richiesta in un profilo (tabella COMPRENDE),
   l'utente (tabella INDICA) possiede la stessa competenza con un livello maggiore o uguale. */
CREATE VIEW Candidature_Valide AS
SELECT C.email_utente, C.id_profilo, CMP.competenza
FROM CANDIDATURA C
JOIN INDICA I ON C.email_utente = I.email_utente
JOIN COMPRENDE CMP ON C.id_profilo = CMP.id_profilo
WHERE I.competenza = CMP.competenza AND I.livello >= CMP.livello;


/* Trigger: Verifica che la somma dei finanziamenti non superi il budget del progetto */
DELIMITER //
CREATE TRIGGER verifica_budget_superato
AFTER INSERT ON FINANZIAMENTO
FOR EACH ROW
BEGIN
    DECLARE totale FLOAT;
    DECLARE budget FLOAT;
    
    -- Calcola la somma totale dei finanziamenti per il progetto
    SELECT SUM(importo) INTO totale 
    FROM FINANZIAMENTO 
    WHERE nome_progetto = NEW.nome_progetto;
    
    -- Ottiene il budget del progetto
    SELECT budget INTO budget 
    FROM PROGETTO 
    WHERE nome = NEW.nome_progetto;
    
    -- Se i finanziamenti raggiungono o superano il budget, chiude il progetto
    IF totale >= budget THEN
        UPDATE PROGETTO 
        SET stato = 'chiuso' 
        WHERE nome = NEW.nome_progetto;
    END IF;
END //
DELIMITER ;

/* Evento: Chiude i progetti aperti superata la data limite */
DELIMITER //
CREATE EVENT chiudi_progetti_scaduti
ON SCHEDULE EVERY 1 DAY
DO
BEGIN
    UPDATE PROGETTO
    SET stato = 'chiuso'
    WHERE stato = 'aperto' AND data_limite < CURDATE();
END //
DELIMITER ;

/* Trigger 3: Aggiorna l’affidabilità di un creatore alla ricezione di un finanziamento.
   Nota: Per rispettare il vincolo (0-10), si calcola (progetti_finanziati/ totale_progetti)*10 */
DELIMITER //
CREATE TRIGGER aggiorna_affidabilita_finanziamento
AFTER INSERT ON FINANZIAMENTO
FOR EACH ROW
BEGIN
    DECLARE progetti_finanziati INT;
    DECLARE totale_progetti INT;
    
    -- Numero di progetti del creatore che hanno ricevuto almeno un finanziamento
    SELECT COUNT(DISTINCT nome_progetto) INTO progetti_finanziati
    FROM FINANZIAMENTO
    WHERE nome_progetto IN (
        SELECT nome 
        FROM PROGETTO 
        WHERE email_creatore = (SELECT email_creatore FROM PROGETTO WHERE nome = NEW.nome_progetto)
    );
    
    -- Numero totale di progetti creati dal creatore
    SELECT COUNT(*) INTO totale_progetti 
    FROM PROGETTO 
    WHERE email_creatore = (SELECT email_creatore FROM PROGETTO WHERE nome = NEW.nome_progetto);
    
    -- Aggiornamento dell'affidabilità (scala 0-10)
    IF totale_progetti > 0 THEN
        UPDATE UTENTE_CREATORE
        SET affidabilita = (progetti_finanziati / totale_progetti) * 10
        WHERE email_utente_creat = (SELECT email_creatore FROM PROGETTO WHERE nome = NEW.nome_progetto);
    END IF;
END //
DELIMITER ;

/* Trigger 4: Incrementa il numero di progetti per un creatore alla creazione di un nuovo progetto */
DELIMITER //
CREATE TRIGGER incrementa_nr_progetti
AFTER INSERT ON PROGETTO
FOR EACH ROW
BEGIN
    UPDATE UTENTE_CREATORE
    SET nr_progetti = nr_progetti + 1
    WHERE email_utente_creat = NEW.email_creatore;
END //
DELIMITER ;

/* ------------------------------------ */
/* OPERAZIONI CHE RIGUARDANO TUTTI GLI UTENTI */

/* Log registrazione nuovo utente */
DELIMITER //
CREATE TRIGGER log_nuovo_utente
AFTER INSERT ON UTENTE
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuovo Utente', NEW.email, CONCAT('L\'utente ', NEW.nickname, ' si è registrato.'));
END //
DELIMITER ;

/* Log inserimento skill di curriculum (tabella INDICA) */
DELIMITER //
CREATE TRIGGER log_inserimento_skill
AFTER INSERT ON INDICA
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Inserimento Skill', NEW.email_utente, 
        CONCAT('L\'utente ha aggiunto la skill ', NEW.competenza, ' con livello ', NEW.livello, '.'));
END //
DELIMITER ;

/* Procedura per log della visualizzazione dei progetti */
DELIMITER //
CREATE PROCEDURE Log_Visualizzazione_Progetti(
    IN p_email_utente VARCHAR(255)
)
BEGIN
    CALL InserisciLogEvento('Visualizzazione Progetti', p_email_utente, 
        'L\'utente ha visualizzato la lista dei progetti disponibili.');
END //
DELIMITER ;

/* Log finanziamento di un progetto */
DELIMITER //
CREATE TRIGGER log_finanziamento
AFTER INSERT ON FINANZIAMENTO
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuovo Finanziamento', NEW.email_utente, 
        CONCAT('L\'utente ha finanziato il progetto ', NEW.nome_progetto, ' con ', NEW.importo, ' euro.'));
END //
DELIMITER ;

/* Log scelta della reward per un progetto */
DELIMITER //
CREATE TRIGGER log_scelta_reward
AFTER INSERT ON FINANZIAMENTO
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Scelta Reward', NEW.email_utente, 
        CONCAT('L\'utente ha scelto la reward con codice ', NEW.codice_reward, ' per il progetto ', NEW.nome_progetto, '.'));
END //
DELIMITER ;

/* Log inserimento di un commento su un progetto */
DELIMITER //
CREATE TRIGGER log_nuovo_commento
AFTER INSERT ON COMMENTO
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuovo Commento', NEW.email_utente, 
        CONCAT('L\'utente ha commentato il progetto ', NEW.nome_progetto, '.'));
END //
DELIMITER ;

/* Log inserimento candidatura per un profilo */
DELIMITER //
CREATE TRIGGER log_nuova_candidatura
AFTER INSERT ON CANDIDATURA
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuova Candidatura', NEW.email_utente, 
        CONCAT('L\'utente si è candidato per il profilo ', NEW.id_profilo, '.'));
END //
DELIMITER ;

/* ------------------------------------ */
/* OPERAZIONI CHE RIGUARDANO GLI AMMINISTRATORI */

/* Log inserimento di una nuova stringa nella lista delle competenze (tabella SKILL) */
DELIMITER //
CREATE TRIGGER log_nuova_skill
AFTER INSERT ON SKILL
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuova Skill', NEW.email_utente_amm, 
        CONCAT('L\'amministratore ha aggiunto la competenza ', NEW.competenza, '.'));
END //
DELIMITER ;

/* Procedura per log di autenticazione amministratore */
DELIMITER //
CREATE PROCEDURE Log_Autenticazione_Amministratore(
    IN p_email_utente VARCHAR(255)
)
BEGIN
    CALL InserisciLogEvento('Autenticazione Amministratore', p_email_utente, 
        'L\'amministratore ha effettuato l\'accesso con codice di sicurezza.');
END //
DELIMITER ;

/* ------------------------------------ */
/* OPERAZIONI CHE RIGUARDANO GLI UTENTI CREATORI */

/* Log creazione di un nuovo progetto */
DELIMITER //
CREATE TRIGGER log_nuovo_progetto
AFTER INSERT ON PROGETTO
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuovo Progetto', NEW.email_creatore, 
        CONCAT('L\'utente ha creato il progetto ', NEW.nome, '.'));
END //
DELIMITER ;

/* Log inserimento di una reward per un progetto */
DELIMITER //
CREATE TRIGGER log_nuova_reward
AFTER INSERT ON REWARD
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuova Reward', 
        (SELECT email_creatore FROM PROGETTO WHERE nome = NEW.nome_progetto), 
        CONCAT('L\'utente ha aggiunto una reward per il progetto ', NEW.nome_progetto, '.'));
END //
DELIMITER ;

/* Log inserimento di una risposta ad un commento */
DELIMITER //
CREATE TRIGGER log_risposta_commento
AFTER INSERT ON RISPOSTA_COMMENTO
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Risposta a Commento', NEW.email_creatore, 
        CONCAT('L\'utente ha risposto a un commento con ID ', NEW.id_commento, '.'));
END //
DELIMITER ;

/* Log creazione di un profilo per un progetto software */
DELIMITER //
CREATE TRIGGER log_nuovo_profilo
AFTER INSERT ON PROFILO
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Nuovo Profilo', 
        (SELECT email_creatore FROM PROGETTO WHERE nome = NEW.nome_software), 
        CONCAT('L\'utente ha creato il profilo ', NEW.nome, ' per il progetto software ', NEW.nome_software, '.'));
END //
DELIMITER ;

/* Log accettazione o rifiuto di una candidatura */
DELIMITER //
CREATE TRIGGER log_accettazione_candidatura
AFTER UPDATE ON CANDIDATURA
FOR EACH ROW
BEGIN
    CALL InserisciLogEvento('Gestione Candidatura', 
        (SELECT email_creatore FROM PROGETTO WHERE nome_progetto = 
            (SELECT nome_progetto FROM PROFILO WHERE id = NEW.id_profilo)), 
        CONCAT('L\'utente ha ', IF(NEW.esito, 'accettato', 'rifiutato'), 
               ' la candidatura di ', NEW.email_utente, ' per il profilo ', NEW.id_profilo, '.'));
END //
DELIMITER ;

/* ------------------------------------ */
/* STATISTICHE (VISIBILI DA TUTTI GLI UTENTI) */

/* Classifica degli utenti creatori per affidabilità */
CREATE VIEW ClassificaCreatori AS
SELECT U.nickname, UC.affidabilita
FROM UTENTE_CREATORE UC
JOIN UTENTE U ON UC.email_utente_creat = U.email
ORDER BY UC.affidabilita DESC
LIMIT 3;

/* Progetti aperti più vicini al completamento */
CREATE VIEW ProgettiViciniAlCompletamento AS
SELECT P.nome, P.budget, 
       (P.budget - COALESCE(SUM(F.importo), 0)) AS mancante
FROM PROGETTO P
LEFT JOIN FINANZIAMENTO F ON P.nome = F.nome_progetto
WHERE P.stato = 'aperto'
GROUP BY P.nome, P.budget
ORDER BY mancante ASC
LIMIT 3;

/* Classifica degli utenti in base al totale dei finanziamenti erogati */
CREATE VIEW ClassificaFinanziatori AS
SELECT U.nickname, SUM(F.importo) AS totale_finanziato
FROM FINANZIAMENTO F
JOIN UTENTE U ON F.email_utente = U.email
GROUP BY U.nickname
ORDER BY totale_finanziato DESC
LIMIT 3;